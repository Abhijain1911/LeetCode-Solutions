/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Double> averageOfLevels(TreeNode root) {
        if(root==null){
			return new ArrayList<>();
		}
        return maxLevelSum(root);
    }
    public List<Double> maxLevelSum(TreeNode root) {
        if(root==null){
			return new ArrayList<>();
		}
		Queue<TreeNode> q=new LinkedList<>();
		ArrayList<Double> list=new ArrayList<>();
		q.add(root);
		q.add(null);
        while(!q.isEmpty()){
			double sum=0;
            double avg=0;
            int count=0;
			TreeNode newnode=q.remove();
			while(newnode!=null){
                count++;
				sum+=newnode.val;
                avg=sum/count;
				if(newnode!=null){
					if(newnode.left!=null){
						q.add(newnode.left);
					}
					if(newnode.right!=null){
						q.add(newnode.right);
					}
				}
				newnode=q.remove();
				if(newnode==null){
					if(q.isEmpty()){
						break;
					}else{
						q.add(null);	
					}
				}
			}
			list.add(avg);
		}
		return list;
    }
}
